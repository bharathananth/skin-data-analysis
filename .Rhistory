---
title: "XEN analysis"
author: "Marta Julia Fernández González"
date: "22/11/2020"
output: html_document
---
Import the data:

Line graph pre OP IOP to post OP IOP up to 2 years: Every patients every follow up
```{r}
library("readxl")
graficas_narkose <- read_excel("graficas_narkose.xlsx")
grafica_IOPT<- graficas_narkose[, 13:14]
summary(grafica_IOPT)
grafica_IOPT<- replace(grafica_IOPT, grafica_IOPT== -9, NA)
#number of missing data
sum(!complete.cases(grafica_IOPT ))
grafica_IOPT <- na.omit(grafica_IOPT)
summary(grafica_IOPT)
medias<-filter(grafica_IOPT, Follow_N== "1")
medias<-filter(grafica_IOPT, Follow_N== "2")
medias<-filter(grafica_IOPT, Follow_N== "3")
medias<-filter(grafica_IOPT, Follow_N== "4")
medias<-filter(grafica_IOPT, Follow_N== "5")
medias<-filter(grafica_IOPT, Follow_N== "6")
medias<-filter(grafica_IOPT, Follow_N== "7")
medias<-filter(grafica_IOPT, Follow_N== "8")
library("dplyr")
grafica_IOPT$Follow_N<-recode_factor(grafica_IOPT$Follow_N, `1` = "PreOP", `2` = "Day 1", `3` = "Week 6",`4` = "Month 3",`5` = "Month 6", `6` = "Year 1", `7` = "Year 1.5",`8` = "Year 2")
```
install.packages('readxl')
install.packages('dplyr')
install.packages('ggplot1')
install.packages('ggplot2')
library("readxl")
narkose_2J <- read_excel("graficas_narkose.xlsx")
summary(narkose_2J)
str(narkose_2J)
narkose_2J<-narkose_2J[, 1:3]
library("readxl")
grafica_IOPT<- replace(grafica_IOPT, grafica_IOPT== -9, NA)
grafica_IOPT<- replace(grafica_IOPT, grafica_IOPT== -9, NA)
grafica_IOPT<- graficas_narkose[, 13:14]
graficas_narkose <- read_excel("graficas_narkose.xlsx")
grafica_IOPT<- graficas_narkose[, 13:14]
summary(grafica_IOPT)
grafica_IOPT<- replace(grafica_IOPT, grafica_IOPT== -9, NA)
#number of missing data
sum(!complete.cases(grafica_IOPT ))
grafica_IOPT <- na.omit(grafica_IOPT)
summary(grafica_IOPT)
medias<-filter(grafica_IOPT, Follow_N== "1")
medias<-filter(grafica_IOPT, Follow_N== "2")
medias<-filter(grafica_IOPT, Follow_N== "3")
medias<-filter(grafica_IOPT, Follow_N== "4")
medias<-filter(grafica_IOPT, Follow_N== "6")
medias<-filter(grafica_IOPT, Follow_N== "7")
medias<-filter(grafica_IOPT, Follow_N== "8")
grafica_IOPT %>% head
library('dplyr')
grafica_IOPT %>% head
medias<-filter(grafica_IOPT, Follow_N== "1")
medias<-filter(grafica_IOPT, Follow_N== "2")
medias<-filter(grafica_IOPT, Follow_N== "3")
medias<-filter(grafica_IOPT, Follow_N== "4")
medias<-filter(grafica_IOPT, Follow_N== "6")
medias<-filter(grafica_IOPT, Follow_N== "7")
grafica_IOPT$Follow_N<-recode_factor(grafica_IOPT$Follow_N, `1` = "PreOP", `2` = "Day 1", `3` = "Week 6",`4` = "Month 3",`5` = "Month 6", `6` = "Year 1", `7` = "Year 1.5",`8` = "Year 2")
#prueba 1
library("ggplot2")
p<-ggplot(data = grafica_IOPT, aes(x =  Follow_N, y =  IOP_N)) + stat_summary(aes(y = IOP_N,group=1), fun=mean, colour="black", geom="line",group=1,size=1) +geom_point(alpha = 0.3)+ theme_classic() + theme(legend.position = "none",) + labs(x="Follow up period of time", y = "Mean IOP")+  theme(axis.text=element_text(family="sans"))+ theme_classic()
p
grafica_IOPT %>% head
grafica_IOPT
grafica_IOPT[1:100]
grafica_IOPT[,1:100]
grafica_IOPT[1:100,]
grafica_IOPT %>% dim
grafica_IOPT %>% filter(Follow_N=='PreOP')
medias
p + scale_x_discrete(labels=c("PreOP" = "PreOP\n(N=10)", "1" = "Dose 1",
"2" = "Dose 2"))
p + scale_x_discrete(labels=c("PreOP" = "PreOP\n(N=169)", "Day 1" = "Day 1\n(N=169)",
"Week 6" = "Week 6\n(N=147)", "Month 3" = "Month 3\n(N=145)", "Month 6" = "Month 6\n(N=)136", "Year 1"="Year 1\n(N=123)", "Year 1.5"="Year 1.5\n(N=37)", "Year 2"="Year 2\n(N=41)"))
library("readxl")
narkose_2J <- read_excel("graficas_narkose.xlsx")
summary(narkose_2J)
str(narkose_2J)
narkose_2J<-narkose_2J[, 4:6]
narkose_2J$narkose_2J<- NULL
narkose_2J<- replace(narkose_2J, narkose_2J== -9, NA)
#number of missing data
sum(!complete.cases(narkose_2J ))
narkose_2J <- na.omit(narkose_2J)
summary(narkose_2J)
narkose_2J<- as.data.frame(narkose_2J)
library("dplyr")
narkose_2J$Follow...5<-recode_factor(narkose_2J$Follow...5, `1` = "PreOP", `2` = "Day 1", `3` = "Week 6",`4` = "Month 3",`5` = "Month 6", `6` = "Year 1")
library("dplyr")
narkose_2J$Narkose...6<-recode_factor(narkose_2J$Narkose...6, `1` = "Lokal", `2` = "ITN")
medias<-filter(narkose_2J, Follow...5 == "PreOP",Narkose...6=="ITN")
mean(medias$IOP...4)
medias1<-filter(narkose_2J, Follow...5 == "PreOP",Narkose...6=="Lokal")
mean(medias1$IOP...4)
medias<-filter(narkose_2J, Follow...5 == "Day 1",Narkose...6=="ITN")
mean(medias$IOP...4)
medias1<-filter(narkose_2J, Follow...5 == "Day 1",Narkose...6=="Lokal")
mean(medias1$IOP...4)
medias<-filter(narkose_2J, Follow...5 == "Week 6",Narkose...6=="ITN")
medias1<-filter(narkose_2J, Follow...5 == "Week 6",Narkose...6=="Lokal")
medias<-filter(narkose_2J, Follow...5 == "Month 3",Narkose...6=="ITN")
mean(medias$IOP...4)
medias1<-filter(narkose_2J, Follow...5 == "Month 3",Narkose...6=="Lokal")
medias<-filter(narkose_2J, Follow...5 == "Month 6",Narkose...6=="ITN")
mean(medias$IOP...4)
medias1<-filter(narkose_2J, Follow...5 == "Month 6",Narkose...6=="Lokal")
medias<-filter(narkose_2J, Follow...5 == "Year 1",Narkose...6=="ITN")
medias1<-filter(narkose_2J, Follow...5 == "Year 1",Narkose...6=="Lokal")
mean(medias1$IOP...4)
library("dplyr")
mean_data <- group_by(narkose_2J, Narkose...3, Follow...2) %>%
summarise(IOP...1 = mean(IOP...1 , na.rm = TRUE))
library("readxl")
narkose_2J <- read_excel("graficas_narkose.xlsx")
summary(narkose_2J)
str(narkose_2J)
narkose_2J<-narkose_2J[, 1:3]
library("readxl")
narkose_2J <- read_excel("graficas_narkose.xlsx")
summary(narkose_2J)
str(narkose_2J)
narkose_2J<-narkose_2J[, 1:3]
narkose_2J<- replace(narkose_2J, narkose_2J== -9, NA)
#number of missing data
sum(!complete.cases(narkose_2J ))
narkose_2J <- na.omit(narkose_2J)
summary(narkose_2J)
narkose_2J<- as.data.frame(narkose_2J)
library("dplyr")
narkose_2J$Follow...5<-recode_factor(narkose_2J$Follow...5, `1` = "PreOP", `2` = "Day 1", `3` = "Week 6",`4` = "Month 3",`5` = "Month 6", `6` = "Year 1")
narkose_2J$IOP...4<-as.numeric(narkose_2J$IOP...4)
library("dplyr")
narkose_2J$Follow...5<-recode_factor(narkose_2J$Follow...5, `1` = "PreOP", `2` = "Day 1", `3` = "Week 6",`4` = "Month 3",`5` = "Month 6", `6` = "Year 1")
library("dplyr")
narkose_2J$Narkose...6<-recode_factor(narkose_2J$Narkose...6, `1` = "Lokal", `2` = "ITN")
2**2
2^2
library(limma)
library(magrittr)
library(tidyverse)
library(hgug4112a.db)
library(ggrepel)
library(ggforce)
library(statmod)
library(GO.db)
library(tibble)
##--------------Parameters----------------------------------------------------------------##
fdr_cutoff <- 0.05
amp_cutoff <- log2(1 + 0.2)
setwd("~/Documents/POSTDOC/skin-data-analysis")
if (!file.exists("data/raw_MA_files.RDS")){
##--------------Read in image files-------------------------------------------------------##
files <- list.files("/extra/Skin Data/raw data/", full.names = TRUE)
m <- regexpr("(D|E)\\d+_P\\d+", files, perl = TRUE)
names <- regmatches(files, m)
images <- read.maimages(files = files, source = "agilent", green.only = TRUE, names = names, other.columns = "gIsWellAboveBG")
##--------annotation of probes------------------------------------------------------------##
images$genes$Symbol <- mapIds(hgug4112a.db, images$genes$ProbeName, keytype = "PROBEID", column = "SYMBOL")
images$genes$ENSEMBL <- mapIds(hgug4112a.db, images$genes$ProbeName, keytype = "PROBEID", column = "ENSEMBL")
images$genes$EntrezID <- mapIds(hgug4112a.db, images$genes$ProbeName, keytype = "PROBEID", column = "ENTREZID")
saveRDS(images, file = "data/raw_MA_files.RDS",compress = "gzip")
} else {
images <- readRDS("data/raw_MA_files.RDS")
}
##--------background correct -------------------------------------------------------------##
y <- limma::backgroundCorrect(images, method = "normexp") #nomexp when background intensities are not known
##--------normalize between the different arrays------------------------------------------##
y <- normalizeBetweenArrays(y, method = "quantile")
##-----------------------------filtering out controls and lowly expressed----------------##
Control <- y$genes$ControlType==1L
#Control_M <- y$genes$ControlType==1 #This would also work
NoID <- is.na(y$genes$ENSEMBL)
IsExpr <- rowSums(y$other$gIsWellAboveBG>0) >= 77 #half of length of colnames(y$other$gIsWellAboveBG), but why this value?
y0 <- y[!Control & !NoID & IsExpr, ]   ## This data (expressed, identified, not controls) already has a gene annotation in it.
y0$genes <- y0$genes[, c("ProbeName", "Symbol", "ENSEMBL", "EntrezID")] #keep only these columns
yave <- avereps(y0, y0$genes[, "ENSEMBL"])  ## Averaging probes mapping to the same gene
rownames(yave$E) <- yave$genes$ProbeName
experiment <- data.frame(tissue = character(), time = integer(), subject = character()) %>%
{strcapture("(\\w)(\\d+)_(\\w+)", colnames(y0$E), ., perl = TRUE)}
tissue <- factor(experiment$tissue)
time <- experiment$time
subject <- factor(experiment$subject)
##--------------------constructing the multi-level design matrix-------------------------##
inphase <- cos(2*pi*time/24)
outphase <- sin(2*pi*time/24)
design <- model.matrix(~ 0 + subject + tissue + tissue:inphase + tissue:outphase)
wts <- arrayWeights(yave, model.matrix(~tissue + subject)) # simpler model used as suggested in userguide. #####
fit <- lmFit(yave, design, weights = wts)
fit2 <- eBayes(fit, trend = TRUE, robust = TRUE)
rhy_indices <- which(grepl("phase",colnames(design)))
results <- topTable(fit2, coef = rhy_indices, number = Inf, sort.by = "none") %>%
set_colnames(gsub("\\.","_", colnames(.)))
results %<>% #results %<>% == results <- results %>%
dplyr::mutate(A_D = sqrt(tissueD_inphase^2 + tissueD_outphase^2), #amplitude_D == cos_component**2 + sin_component**2, they are in log2 values??
A_E = sqrt(tissueE_inphase^2 + tissueE_outphase^2),
phaseD = atan2(tissueD_outphase, tissueD_inphase)*12/pi, #atan2 takes two arguments, y and x, arctan just takes the angle
phaseE = atan2(tissueE_outphase, tissueE_inphase)*12/pi)
{ggplot(data = dplyr::filter(results, pmax(A_D, A_E) > amp_cutoff) %>% dplyr::mutate(len = length(adj_P_Val))) +
#pmax gives the maximum of each zipped pair of values A_D[i], A_E[i]
stat_ecdf(aes(x = adj_P_Val, len=len, y = ..y..*len), geom = "step") +  ##########why len?
coord_cartesian(xlim = c(0.001, 0.05), ylim = c(0,2000)) + theme_bw() +
xlab("False discovery rate") + ylab("number of rhythmic genes")} %T>% ggsave("figures/Noofgenes.pdf", .) #T pipe works like %>% but it returns the left-hand side instead of the right-hand
some_rhythm <- dplyr::filter(results, pmax(A_D, A_E) > amp_cutoff & adj_P_Val < fdr_cutoff) %$% ProbeName #some_rhythm in both A_D & A_E, note that amp is in log2?
rhythm_E <- dplyr::filter(results, A_E > amp_cutoff & adj_P_Val < fdr_cutoff) %$% ProbeName #some_rhythm in both A_D & A_E, note that amp is in log2?
rhythm_D <- dplyr::filter(results, A_D > amp_cutoff & adj_P_Val < fdr_cutoff) %$% ProbeName #some_rhythm in both A_D & A_E, note that amp is in log2?
clock_genes <- c("PER1","PER2","PER3", "CRY1", "CRY2", "NR1D1", "NR1D2", "ARNTL", "ARNTL2", "CLOCK", "NPAS2","RORA","RORB","RORC", "CSNK1D", "CSNK1E", "DBP")
{ggplot(data = dplyr::filter(results, ProbeName %in% some_rhythm), aes(x=2^A_D-1, y=2^A_E-1)) + #amps are in log2
geom_point(aes(color=Symbol %in% clock_genes), size=1) +
geom_text_repel(aes(label=ifelse(Symbol %in% clock_genes, as.character(Symbol), "")), color="red") +
scale_color_manual(values=c("black","red")) +
theme_bw() + theme(aspect.ratio = 1, legend.position = "none") + coord_cartesian(xlim=c(0,1), ylim = c(0,1)) +
xlab("Relative Amplitude -- Dermis") + ylab("Relative Amplitude -- Epidermis")} %T>% ggsave("figures/Amplitude_compare.pdf", .)
{ggplot(data = dplyr::filter(results, ProbeName %in% some_rhythm), aes(x=phaseD, y=phaseE)) +
geom_point(aes(color=Symbol %in% clock_genes), size=1) +
geom_text_repel(aes(label=ifelse(Symbol %in% clock_genes, as.character(Symbol), "")), color="red") +
scale_color_manual(values=c("black","red")) +
theme_bw() + theme(aspect.ratio = 1, legend.position = "none")  + geom_abline(slope = 1, alpha=0.2) +
scale_x_continuous(breaks = seq(-12,12,by = 6)) +
scale_y_continuous(breaks = seq(-12,12,by = 6)) +
xlab("Phase -- Dermis") + ylab("Phase -- Epidermis")} %T>% ggsave("figures/Phase_compare.pdf", .)
g <- goana(yave[yave$genes$ProbeName %in% some_rhythm,]$genes$EntrezID, universe = yave$genes$EntrezID) #universe is the 'background' universe for the analysis, if none provided, then all EntrezID will be used
g_E <- goana(yave[yave$genes$ProbeName %in% rhythm_E,]$genes$EntrezID, universe = yave$genes$EntrezID) #universe is the 'background' universe for the analysis, if none provided, then all EntrezID will be used
g_D <- goana(yave[yave$genes$ProbeName %in% rhythm_D,]$genes$EntrezID, universe = yave$genes$EntrezID) #universe is the 'background' universe for the analysis, if none provided, then all EntrezID will be used
topGO(g, n=20, truncate.term = "50") #body fluid secretion top term
topGO(g_E, n=20, truncate.term = "50") #circ. rhythm, detox, metals
topGO(g_D, n=20, truncate.term = "50")
# Pathway analysis of rhythmic genes (amp>, fdr< cutoff)
k <- kegga(yave[yave$genes$ProbeName %in% some_rhythm,]$genes$EntrezID, universe = yave$genes$EntrezID)
k_E <- kegga(yave[yave$genes$ProbeName %in% rhythm_E,]$genes$EntrezID, universe = yave$genes$EntrezID)
k_D <- kegga(yave[yave$genes$ProbeName %in% rhythm_D,]$genes$EntrezID, universe = yave$genes$EntrezID)
topKEGG(k, n=20, truncate.path = "50")
topKEGG(k_E, n=20, truncate.path = "50") #more metabolic-related pathways
topKEGG(k_D, n=20, truncate.path = "50") #lots of disease-related pathways! diabetes, malaria, trypanosomiasis, amoebiasis, HSV, legionella
##------------working only with these rhythmic genes-----------------------------------##
##------------performing differential rhythmicity analysis---------------------------- ##
yrhy <- yave[yave$genes$ProbeName %in% some_rhythm, ] #expression levels of rhythmic genes
fit_rhy <- fit[yave$genes$ProbeName %in% some_rhythm, ] #fits of those rhythmic genes
colnames_proper <- gsub(":", "_", colnames(design))
contrast1 <- makeContrasts(tissueD_inphase - tissueE_inphase, tissueD_outphase - tissueE_outphase, levels = colnames_proper) #####?
rownames(contrast1) <- colnames(design)
fit_rhy2 <- contrasts.fit(fit = fit_rhy, contrasts = contrast1)
fit_rhy2 <- eBayes(fit_rhy2, trend = TRUE, robust = TRUE)
results2 <- topTable(fit_rhy2, number = Inf, sort.by = "none") %>%
set_colnames(gsub("\\.","_", colnames(.)))
diff_rhythm <- dplyr::filter(results2, adj_P_Val < fdr_cutoff) %$% ProbeName
results_diff_rhythm <- results %>% dplyr::filter(ProbeName %in% diff_rhythm) %>%
dplyr::mutate(Aratio = A_E-A_D, ph_diff = (phaseE-phaseD + 12) %% 24 - 12)
{ggplot(dplyr::filter(results, ProbeName %in% some_rhythm)) +
geom_rect(xmin = amp_cutoff, xmax=1, ymin=0, ymax = amp_cutoff, alpha=0.1, fill="grey90") +
geom_rect(xmin = 0, xmax=amp_cutoff, ymin=amp_cutoff, ymax = 1, alpha=0.1, fill="grey90") +
geom_point(aes(x=A_D, y =A_E, color=factor(ProbeName %in% diff_rhythm, levels=c(TRUE, FALSE))), size=0.75) +
theme_bw() + theme(aspect.ratio = 1, legend.position = "none") + scale_color_manual(values=c("red", "black")) +
xlab("Relative Amplitude -- Dermis") + ylab("Relative Amplitude -- Epidermis") +
coord_cartesian(xlim=c(0,1),ylim=c(0,1))}
ggplot(results_diff_rhythm) + geom_histogram(aes(x=Aratio),bins = 50, fill=NA, color="grey20") + theme_bw() +
xlab("Amplitude_Epidermis - Amplitude_Dermis")
ggplot(results_diff_rhythm) + geom_histogram(aes(x=ph_diff),bins = 50, fill=NA, color="grey20") + theme_bw() +
xlab("Phase_Epidermis - Phase_Dermis") + coord_polar(start = pi/50+pi)
ggplot(results_diff_rhythm) + geom_point(aes(x=Aratio, y=ph_diff))
fitted_values <- fit$coefficients[, rhy_indices] %*% t(design[, rhy_indices]) %>%
set_rownames(fit$genes$Symbol) %>%
set_colnames(colnames(yave$E))
in_both_rhythm <- results_diff_rhythm %>% dplyr::filter(pmin(A_D, A_E) > amp_cutoff)
mean_data <- yave$E %>% transform(ProbeName = yave$genes$ProbeName,
Symbol = yave$genes$Symbol) %>% as_tibble() %>%
tidyr::gather(junk, value, -ProbeName, -Symbol) %>%
tidyr::separate(junk, c("tissuetime","subject"), sep = "_", convert = TRUE) %>%
tidyr::separate(tissuetime, c("tissue","time"), convert = TRUE, sep = 1) %>%
dplyr::filter(ProbeName %in% diff_rhythm) %>%
dplyr::group_by(ProbeName, Symbol, tissue, time) %>%
dplyr::summarise(value = mean(value)) %>%
dplyr::mutate(value = value - mean(value))
page_no <- 8
{ggplot(data = dplyr::filter(results, ProbeName %in% some_rhythm), aes(x=2^A_D-1, y=2^A_E-1)) + #amps are in log2
geom_point(aes(color=Symbol %in% clock_genes), size=1) +
geom_text_repel(aes(label=ifelse(Symbol %in% clock_genes, as.character(Symbol), "")), color="red") +
scale_color_manual(values=c("black","red")) +
theme_bw() + theme(aspect.ratio = 1, legend.position = "none") + coord_cartesian(xlim=c(0,1), ylim = c(0,1)) +
xlab("Relative Amplitude -- Dermis") + ylab("Relative Amplitude -- Epidermis")} %T>% ggsave("figures/Amplitude_compare.pdf", .)
some_rhythm <- dplyr::filter(results, pmax(A_D, A_E) > amp_cutoff & adj_P_Val < fdr_cutoff) %$% ProbeName #some_rhythm in both A_D & A_E, note that amp is in log2?
y0 <- y[!Control & !NoID & IsExpr, ]   ## This data (expressed, identified, not controls) already has a gene annotation in it.
y0$genes <- y0$genes[, c("ProbeName", "Symbol", "ENSEMBL", "EntrezID")] #keep only these columns
yave <- avereps(y0, y0$genes[, "ENSEMBL"])  ## Averaging probes mapping to the same gene
rownames(yave$E) <- yave$genes$ProbeName
##----------------------extracting sample details from column names ----------------------##
experiment <- data.frame(tissue = character(), time = integer(), subject = character()) %>%
{strcapture("(\\w)(\\d+)_(\\w+)", colnames(y0$E), ., perl = TRUE)}
tissue <- factor(experiment$tissue)
time <- experiment$time
subject <- factor(experiment$subject)
##--------------------constructing the multi-level design matrix-------------------------##
inphase <- cos(2*pi*time/24)
outphase <- sin(2*pi*time/24)
design <- model.matrix(~ 0 + subject + tissue + tissue:inphase + tissue:outphase)
wts <- arrayWeights(yave, model.matrix(~tissue + subject)) # simpler model used as suggested in userguide. #####
fit <- lmFit(yave, design, weights = wts)
fit2 <- eBayes(fit, trend = TRUE, robust = TRUE)
rhy_indices <- which(grepl("phase",colnames(design)))
results <- topTable(fit2, coef = rhy_indices, number = Inf, sort.by = "none") %>%
set_colnames(gsub("\\.","_", colnames(.)))
results %<>% #results %<>% == results <- results %>%
dplyr::mutate(A_D = sqrt(tissueD_inphase^2 + tissueD_outphase^2), #amplitude_D == cos_component**2 + sin_component**2, they are in log2 values??
A_E = sqrt(tissueE_inphase^2 + tissueE_outphase^2),
phaseD = atan2(tissueD_outphase, tissueD_inphase)*12/pi, #atan2 takes two arguments, y and x, arctan just takes the angle
phaseE = atan2(tissueE_outphase, tissueE_inphase)*12/pi)
{ggplot(data = dplyr::filter(results, pmax(A_D, A_E) > amp_cutoff) %>% dplyr::mutate(len = length(adj_P_Val))) +
#pmax gives the maximum of each zipped pair of values A_D[i], A_E[i]
stat_ecdf(aes(x = adj_P_Val, len=len, y = ..y..*len), geom = "step") +  ##########why len?
coord_cartesian(xlim = c(0.001, 0.05), ylim = c(0,2000)) + theme_bw() +
xlab("False discovery rate") + ylab("number of rhythmic genes")} %T>% ggsave("figures/Noofgenes.pdf", .) #T pipe works like %>% but it returns the left-hand side instead of the right-hand
some_rhythm <- dplyr::filter(results, pmax(A_D, A_E) > amp_cutoff & adj_P_Val < fdr_cutoff) %$% ProbeName #some_rhythm in both A_D & A_E, note that amp is in log2?
clock_genes <- c("PER1","PER2","PER3", "CRY1", "CRY2", "NR1D1", "NR1D2", "ARNTL", "ARNTL2", "CLOCK", "NPAS2","RORA","RORB","RORC", "CSNK1D", "CSNK1E", "DBP")
{ggplot(data = dplyr::filter(results, ProbeName %in% some_rhythm), aes(x=2^A_D-1, y=2^A_E-1)) + #amps are in log2
geom_point(aes(color=Symbol %in% clock_genes), size=1) +
geom_text_repel(aes(label=ifelse(Symbol %in% clock_genes, as.character(Symbol), "")), color="red") +
scale_color_manual(values=c("black","red")) +
theme_bw() + theme(aspect.ratio = 1, legend.position = "none") + coord_cartesian(xlim=c(0,1), ylim = c(0,1)) +
xlab("Relative Amplitude -- Dermis") + ylab("Relative Amplitude -- Epidermis")} %T>% ggsave("figures/Amplitude_compare.pdf", .)
ggplot(data = dplyr::filter(results, ProbeName %in% some_rhythm), aes(x=2^A_D-1, y=2^A_E-1)) + #amps are in log2
geom_point(aes(color=Symbol %in% clock_genes), size=1)
{ggplot(data = dplyr::filter(results, ProbeName %in% some_rhythm), aes(x=2^A_D-1, y=2^A_E-1)) + #amps are in log2
geom_point(aes(color=Symbol %in% clock_genes), size=1) +
geom_text_repel(aes(label=ifelse(Symbol %in% clock_genes, as.character(Symbol), "")), color="red") +
scale_color_manual(values=c("black","red")) +
theme_bw() + theme(aspect.ratio = 1, legend.position = "none") + coord_cartesian(xlim=c(0,1), ylim = c(0,1)) +
xlab("Relative Amplitude -- Dermis") + ylab("Relative Amplitude -- Epidermis")}
